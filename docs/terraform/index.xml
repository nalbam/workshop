<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Terraform on Workshop</title><link>/workshop/terraform/</link><description>Recent content in Terraform on Workshop</description><generator>Hugo -- gohugo.io</generator><language>ko-KR</language><atom:link href="/workshop/terraform/index.xml" rel="self" type="application/rss+xml"/><item><title>Backend</title><link>/workshop/terraform/backend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/workshop/terraform/backend/</guid><description> Terraform state 정보를 저장할 S3 Bucket 를 생성 합니다.
export REGION=&amp;quot;ap-northeast-2&amp;quot; export BUCKET=&amp;quot;terraform-workshop-seoul&amp;quot; aws s3 mb s3://${BUCKET} --region ${REGION} 중복 실행을 막기 위해, DynamoDB Table 을 생성 합니다.
aws dynamodb create-table \ --table-name ${BUCKET} \ --attribute-definitions AttributeName=LockID,AttributeType=S \ --key-schema AttributeName=LockID,KeyType=HASH \ --provisioned-throughput ReadCapacityUnits=1,WriteCapacityUnits=1 \ --region ${REGION} S3 Bucket 이름으로 사용되는 terraform-workshop-seoul 은 다른 사용자와 중복될수 있습니다. 본인의 닉네임 등을 사용하여 유니크한 이름을 부여하도록 합니다.</description></item><item><title>Clone</title><link>/workshop/terraform/git_clone/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/workshop/terraform/git_clone/</guid><description> 환경 구성에 필요한 소스를 복제 합니다.
git clone https://github.com/nalbam/terraform-env-workshop 다음 파일에서 terraform-workshop-seoul 을 생성한 버켓명으로 변경해줍니다.
# export BUCKET=&amp;quot;terraform-nalbam-seoul&amp;quot; cd terraform-env-workshop sed -i &amp;quot;s/terraform-workshop-seoul/${BUCKET}/g&amp;quot; ./vpc/main.tf sed -i &amp;quot;s/terraform-workshop-seoul/${BUCKET}/g&amp;quot; ./eks/main.tf sed -i &amp;quot;s/terraform-workshop-seoul/${BUCKET}/g&amp;quot; ./eks/variable.tf</description></item><item><title>VPC</title><link>/workshop/terraform/vpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/workshop/terraform/vpc/</guid><description>Public subnet 과 Private subnet 을 포함한 VPC 를 생성 합니다.
Terraform 명령으로 생성 합니다.
cd terraform-env-workshop/vpc terraform init terraform plan terraform apply 다음과 같은 메세지가 출력 되면 성공 입니다.
Apply complete! Resources: 0 added, 0 changed, 0 destroyed. Outputs: nat_ip = [ &amp;quot;52.78.13.15&amp;quot;, ] private_subnet_cidr = [ &amp;quot;10.15.4.0/24&amp;quot;, &amp;quot;10.15.5.0/24&amp;quot;, &amp;quot;10.15.6.0/24&amp;quot;, ] private_subnet_ids = [ &amp;quot;subnet-034abbc6xc10634ad&amp;quot;, &amp;quot;subnet-0944x61ec8c2f8f93&amp;quot;, &amp;quot;subnet-06b7d51d44537x626&amp;quot;, ] public_subnet_cidr = [ &amp;quot;10.15.1.0/24&amp;quot;, &amp;quot;10.15.2.0/24&amp;quot;, &amp;quot;10.</description></item><item><title>EKS</title><link>/workshop/terraform/eks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/workshop/terraform/eks/</guid><description>EKS cluster 를 생성하고, on-demand 와 spot instance 로 구성된 Worker node 를 생성 합니다.
Terraform 명령으로 생성 합니다.
cd terraform-env-workshop/eks terraform init terraform plan terraform apply 다음과 같은 메세지가 출력 되면 성공 입니다.
Apply complete! Resources: 0 added, 0 changed, 0 destroyed. Outputs: config = # # kube config aws eks update-kubeconfig --name workshop-eks --alias workshop-eks # or mkdir -p ~/.kube &amp;amp;&amp;amp; cp .</description></item></channel></rss>