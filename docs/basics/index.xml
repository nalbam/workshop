<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Basics on Workshop</title>
    <link>/workshop/basics/</link>
    <description>Recent content in Basics on Workshop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    
	<atom:link href="/workshop/basics/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Git</title>
      <link>/workshop/basics/git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/workshop/basics/git/</guid>
      <description>Introduction  분산 버전 관리.  중앙 서버에 대한 연결에 의존하지 않습니다. 완전한 역사의 많은 사본.  강력한 분기 및 병합. 거의 모든 워크 플로우에 적합합니다. 빠르고 안정적이며 안정적인 파일 형식.  Config 본인의 정보를 입력합니다. 깃 히스토리에 사용 됩니다.
git config --global user.name &amp;quot;nalbam&amp;quot; git config --global user.email &amp;quot;me@nalbam.com&amp;quot;  Clone 워크스페이스 폴더를 만들고 사용자의 깃 소스를 복제 합니다.
mkdir ~/workspace cd ~/workspace git clone https://github.com/&amp;lt;username&amp;gt;/&amp;lt;reponame&amp;gt;.git # or git clone git@github.</description>
    </item>
    
    <item>
      <title>Semantic Versioning</title>
      <link>/workshop/basics/version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/workshop/basics/version/</guid>
      <description>요약 버전을 주.부.수 (MAJOR.MINOR.PATCH) 숫자로 하고:
 기존 버전과 호환되지 않게 API가 바뀌면 “주(主) 버전”을 올리고, 기존 버전과 호환되면서 새로운 기능을 추가할 때는 “부(部) 버전”을 올리고, 기존 버전과 호환되면서 버그를 수정한 것이라면 “수(修) 버전”을 올린다.  주.부.수 형식에 정식배포 전 버전이나 빌드 메타데이터를 위한 라벨을 덧붙이는 방법도 있다.
예시  1.0.0 1.9.0 &amp;lt; 1.10.0 &amp;lt; 1.11.0 1.0.0-alpha, 1.0.0-alpha.1, 1.0.0-0.3.7, 1.0.0-x.7.z.92 1.0.0-alpha+001, 1.0.0+20130313144700, 1.0.0-beta+exp.sha.5114f85 1.0.0-alpha &amp;lt; 1.0.0-alpha.1 &amp;lt; 1.0.0-alpha.beta &amp;lt; 1.</description>
    </item>
    
  </channel>
</rss>